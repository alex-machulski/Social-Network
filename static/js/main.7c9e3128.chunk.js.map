{"version":3,"sources":["redux/dialogs-reducer.ts","components/Users/Users.module.css","components/Profile/ProfileInfo/ProfileInfo.module.css","components/Profile/MyPosts/Post/Post.module.css","components/Navbar/Navbar.module.css","components/Navbar/Navbar.tsx","api/api.ts","redux/users-reducer.ts","components/common/Paginator/Paginator.tsx","assets/images/user.png","components/Users/User.tsx","components/Users/Users.tsx","assets/images/preloader.svg","components/common/Preloader/Preloader.tsx","redux/users-selectors.ts","components/Users/UsersContainer.tsx","components/Profile/ProfileInfo/ProfileStatusWithHooks.tsx","components/Profile/ProfileInfo/ProfileInfo.tsx","redux/profile-reducer.ts","components/Profile/MyPosts/Post/Post.tsx","components/Profile/MyPosts/MyPosts.tsx","components/Profile/MyPosts/MyPostsContainer.tsx","components/Profile/Profile.tsx","components/Profile/ProfileContainer.tsx","components/Header/Header.tsx","redux/auth-reducer.ts","components/Header/HeaderContainer.tsx","components/Login/Login.tsx","redux/sidebar-reducer.ts","redux/app-reducer.ts","redux/redux-store.ts","App.tsx","hoc/withSuspense.tsx","reportWebVitals.ts","index.tsx","utils/validators/validators.ts","components/common/FormsControls/FormsControls.tsx","components/common/FormsControls/FormsControls.module.css","components/common/Paginator/Paginator.module.css","components/Profile/MyPosts/MyPosts.module.css","components/Header/Header.module.css"],"names":["SEND_MESSAGE","initialState","dialogs","id","name","messages","message","sendMessageCreator","newMessageBody","type","dialogsReducer","state","action","body","module","exports","Navbar","ResultCodesEnum","ResultCodeForCaptcha","className","pr","nav","item","to","activeClassName","activeLink","instance","axios","create","withCredentials","baseURL","headers","usersAPI","getUsers","currentPage","pageSize","get","then","response","data","follow","userId","post","unfollow","delete","getProfile","console","warn","profileAPI","getStatus","updateStatus","status","put","authAPI","res","email","password","rememberMe","FOLLOW","UNFOLLOW","SET_USERS","SET_CURRENT_PAGE","SET_TOTAL_USERS_COUNT","TOGGLE_IS_FETCHING","TOGGLE_IS_FOLLOWING_PROGRESS","users","totalUsersCount","isFetching","followingInProgress","followSuccess","userID","unfollowSuccess","setCurrentPage","toggleIsFetching","toggleIsFollowingProgress","followUnfollowFlow","dispatch","apiMethod","actionCreator","a","resultCode","usersReducer","map","u","followed","filter","Paginator","props","pagesCount","Math","ceil","totalItemsCount","pages","i","push","portionCount","portionSize","useState","portionNumber","setPortionNumber","leftPortionPageNumber","rightPortionPageNumber","styles","paginator","onClick","p","selectedPage","pageNumber","onPageChanged","User","user","src","photos","small","userPhoto","alt","disabled","some","Users","Preloader","preloader","createSelector","usersPage","getPageSize","getTotalUsersCount","getCurrentPage","getIsFetching","getFollowingInProgress","UsersContainer","this","React","Component","compose","connect","bind","page","items","totalCount","ProfileStatusWithHooks","editMode","setEditMode","setStatus","useEffect","onDoubleClick","onChange","e","currentTarget","value","autoFocus","onBlur","ProfileInfo","profile","descriptionBlock","large","width","aboutMe","fullName","ADD_POST","SET_USER_PROFILE","SET_STATUS","DELETE_POST","posts","likesCount","profileReducer","newPost","newPostText","postId","Post","maxLength10","maxLengthCreator","MyPosts","memo","postsElements","reverse","postsBlock","AddNewPostReduxForm","onSubmit","values","addPost","reduxForm","form","handleSubmit","Field","component","TextArea","validate","required","placeholder","MyPostsContainer","profilePage","addPostAC","Profile","ProfileContainer","Number","match","params","authorizedUserId","history","getUserProfile","auth","isAuth","withRouter","Header","header","loginBlock","login","logout","SET_USER_DATA","setAuthUserData","payload","getAuthUserData","Success","authReducer","HeaderContainer","LoginReduxForm","Input","error","s","formSummaryError","msg","length","stopSubmit","_error","formData","sidebarReducer","INITIALIZED_SUCCESS","initialized","appReducer","reducers","combineReducers","dialogsPage","sidebar","formReducer","app","composeEnhancers","window","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","store","createStore","applyMiddleware","thunkMiddleware","_store","DialogsContainer","lazy","App","initializeApp","path","render","fallback","AppContainer","MainApp","basename","process","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","document","getElementById","maxLength","FormControl","input","meta","children","hasError","touched","formControl","restProps"],"mappings":"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","file":"static/js/main.7c9e3128.chunk.js","sourcesContent":["import {ActionsType} from \"./redux-store\";\r\nconst SEND_MESSAGE = \"dialogs/SEND-MESSAGE\";\r\n\r\nexport type MessageType = {\r\n    id: number\r\n    message: string;\r\n}\r\nexport type DialogItemType = {\r\n    name: string\r\n    id: number\r\n}\r\nexport type DialogsPageType = {\r\n    dialogs: Array<DialogItemType>\r\n    messages: Array<MessageType>\r\n}\r\n\r\nlet initialState: DialogsPageType = {\r\n    dialogs: [\r\n        {id: 1, name: \"Dimych\"},\r\n        {id: 2, name: \"Andrey\"},\r\n        {id: 3, name: \"Sveta\"},\r\n        {id: 4, name: \"Victor\"},\r\n        {id: 5, name: \"Valera\"}\r\n    ],\r\n    messages: [\r\n        {id: 1, message: \"Hi!\"},\r\n        {id: 2, message: \"How are you?\"},\r\n        {id: 3, message: \"Yo\"},\r\n        {id: 4, message: \"Bro!\"},\r\n        {id: 5, message: \"Hello!\"}\r\n    ],\r\n}\r\n\r\nconst dialogsReducer = (state: DialogsPageType = initialState, action: ActionsType): DialogsPageType => {\r\n\r\n    switch (action.type) {\r\n        case SEND_MESSAGE:\r\n            let body = action.newMessageBody;\r\n            return {\r\n                ...state,\r\n                messages: [...state.messages, {id: 6, message: body}],\r\n            };\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\nexport const sendMessageCreator = (newMessageBody: string) => ({type: SEND_MESSAGE, newMessageBody} as const);\r\n\r\nexport type SendMessageActionType = ReturnType<typeof sendMessageCreator>;\r\n\r\nexport default dialogsReducer;","// extracted by mini-css-extract-plugin\nmodule.exports = {\"userPhoto\":\"Users_userPhoto__sNvzf\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"descriptionBlock\":\"ProfileInfo_descriptionBlock__2qxoF\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"item\":\"Post_item__3F8Y_\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"nav\":\"Navbar_nav__2dd0q\",\"item\":\"Navbar_item__3GoIx\",\"activeLink\":\"Navbar_activeLink__2OeMS\"};","import React from 'react';\r\nimport {NavLink} from 'react-router-dom';\r\nimport pr from './Navbar.module.css';\r\n\r\nfunction Navbar() {\r\n    return (\r\n        <nav className={pr.nav}>\r\n            <div className={pr.item}>\r\n                <NavLink to={\"/profile\"} activeClassName={pr.activeLink}>Profile</NavLink>\r\n            </div>\r\n            <div className={pr.item}>\r\n                <NavLink to={\"/dialogs\"} activeClassName={pr.activeLink}>Messages</NavLink>\r\n            </div>\r\n            <div className={pr.item}>\r\n                <NavLink to={\"/users\"} activeClassName={pr.activeLink}>Users</NavLink>\r\n            </div>\r\n            <div className={pr.item}>\r\n                <NavLink to={\"/news\"} activeClassName={pr.activeLink}>News</NavLink>\r\n            </div>\r\n            <div className={pr.item}>\r\n                <NavLink to={\"/music\"} activeClassName={pr.activeLink}>Music</NavLink>\r\n            </div>\r\n            <div className={pr.item}>\r\n                <NavLink to={\"/settings\"} activeClassName={pr.activeLink}>Settings</NavLink>\r\n            </div>\r\n        </nav>\r\n    );\r\n}\r\n\r\nexport default Navbar;","import axios from \"axios\";\r\n\r\nconst instance = axios.create({\r\n    withCredentials: true,\r\n    baseURL: \"https://social-network.samuraijs.com/api/1.0/\",\r\n    headers: {\r\n        \"API-KEY\": \"ecf8e78d-3a9e-4aa3-9a80-8449dce34aaf\"\r\n    }\r\n})\r\n\r\nexport const usersAPI = {\r\n    getUsers(currentPage: number = 1, pageSize: number = 10) {\r\n        return instance.get(`users?page=${currentPage}&count=${pageSize}`).then(response => response.data);\r\n    },\r\n    follow(userId: number) {\r\n        return instance.post(`follow/${userId}`);\r\n    },\r\n    unfollow(userId: number) {\r\n        return instance.delete(`follow/${userId}`);\r\n    },\r\n    getProfile(userId: number) {\r\n        console.warn(\"Obsolete method. Please use profileAPI object\")\r\n        return profileAPI.getProfile(userId);\r\n    }\r\n};\r\n\r\nexport const profileAPI = {\r\n    getProfile(userId: number) {\r\n        return instance.get(`profile/` + userId);\r\n    },\r\n    getStatus(userId: number) {\r\n        return instance.get(`profile/status/` + userId);\r\n    },\r\n    updateStatus(status: string) {\r\n        return instance.put(`profile/status/`, {status: status});\r\n    }\r\n};\r\n\r\nexport enum ResultCodesEnum {\r\n    Success = 0,\r\n    Error = 1\r\n}\r\n\r\nexport enum ResultCodeForCaptcha {\r\n    CaptchaIsRequired = 10\r\n}\r\n\r\nexport type MeResponseType = {\r\n    data: {\r\n        id: number\r\n        email: string\r\n        login: string\r\n    }\r\n    resultCode: ResultCodesEnum\r\n    messages: Array<string>\r\n}\r\n\r\ntype LoginResponseType = {\r\n    data: {\r\n        userId: number\r\n    }\r\n    resultCode: ResultCodesEnum | ResultCodeForCaptcha\r\n    messages: Array<string>\r\n}\r\n\r\ntype LogoutResponseType = {\r\n    data: {}\r\n    resultCode: ResultCodesEnum\r\n    messages: Array<string>\r\n}\r\n\r\nexport const authAPI = {\r\n    me() {\r\n        return instance.get<MeResponseType>(`auth/me`).then(res => res.data);\r\n    },\r\n    login(email: string, password: string, rememberMe: boolean = false) {\r\n        return instance.post<LoginResponseType>(`auth/login`, {email, password, rememberMe}).then(res => res.data);\r\n    },\r\n    logout() {\r\n        return instance.delete<LogoutResponseType>(`auth/login`).then(res => res.data);\r\n    }\r\n};\r\n\r\n","import {usersAPI} from \"../api/api\";\r\nimport {ThunkAction, ThunkDispatch} from \"redux-thunk\";\r\nimport {ActionsType, AppStateType} from \"./redux-store\";\r\n\r\nconst FOLLOW = \"users/FOLLOW\";\r\nconst UNFOLLOW = \"users/UNFOLLOW\";\r\nconst SET_USERS = \"users/SET_USERS\";\r\nconst SET_CURRENT_PAGE = \"users/SET_CURRENT_PAGE\";\r\nconst SET_TOTAL_USERS_COUNT = \"users/SET_TOTAL_USERS_COUNT\";\r\nconst TOGGLE_IS_FETCHING = \"users/TOGGLE_IS_FETCHING\";\r\nconst TOGGLE_IS_FOLLOWING_PROGRESS = \"users/TOGGLE_IS_FOLLOWING_PROGRESS\";\r\n\r\nexport type UserType = {\r\n    id: number\r\n    photos: {\r\n        small: string\r\n        large: string\r\n    }\r\n    followed: boolean\r\n    name: string\r\n    status: string\r\n    location: {\r\n        city: string\r\n        country: string\r\n    }\r\n}\r\n\r\ntype UsersStateType = {\r\n    users: Array<UserType>\r\n    pageSize: number\r\n    totalUsersCount: number\r\n    currentPage: number\r\n    isFetching: boolean\r\n    followingInProgress: Array<number> // array of user's id\r\n}\r\n\r\nlet initialState: UsersStateType = {\r\n    users: [],\r\n    pageSize: 10,\r\n    totalUsersCount: 0,\r\n    currentPage: 1,\r\n    isFetching: false,\r\n    followingInProgress: []\r\n};\r\n\r\nconst usersReducer = (state: UsersStateType = initialState, action: ActionsType): UsersStateType => {\r\n\r\n    switch (action.type) {\r\n        case FOLLOW:\r\n            return {\r\n                ...state,\r\n                users: state.users.map(u => u.id === action.userID ? {...u, followed: true} : u)\r\n            };\r\n        case UNFOLLOW:\r\n            return {\r\n                ...state,\r\n                users: state.users.map(u => u.id === action.userID ? {...u, followed: false} : u)\r\n            };\r\n        case SET_USERS:\r\n            return {...state, users: action.users}\r\n        case SET_CURRENT_PAGE:\r\n            return {\r\n                ...state,\r\n                currentPage: action.currentPage\r\n            };\r\n        case SET_TOTAL_USERS_COUNT:\r\n            return {\r\n                ...state,\r\n                totalUsersCount: action.totalUsersCount\r\n            };\r\n        case TOGGLE_IS_FETCHING:\r\n            return {...state, isFetching: action.isFetching}\r\n        case TOGGLE_IS_FOLLOWING_PROGRESS:\r\n            return {\r\n                ...state,\r\n                followingInProgress: action.isFetching\r\n                    ? [...state.followingInProgress, action.userId]\r\n                    : state.followingInProgress.filter(id => id !== action.userId)\r\n            }\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\nexport const followSuccess = (userID: number) => ({type: FOLLOW, userID} as const);\r\nexport const unfollowSuccess = (userID: number) => ({type: UNFOLLOW, userID} as const);\r\nexport const setUsers = (users: Array<UserType>) => ({type: SET_USERS, users} as const);\r\nexport const setCurrentPage = (currentPage: number) => ({type: SET_CURRENT_PAGE, currentPage} as const);\r\nexport const setTotalUsersCount = (totalUsersCount: number) => ({\r\n    type: SET_TOTAL_USERS_COUNT,\r\n    totalUsersCount\r\n} as const);\r\nexport const toggleIsFetching = (isFetching: boolean) => ({type: TOGGLE_IS_FETCHING, isFetching} as const);\r\nexport const toggleIsFollowingProgress = (isFetching: boolean, userId: number) => ({\r\n    type: TOGGLE_IS_FOLLOWING_PROGRESS,\r\n    isFetching, userId\r\n} as const);\r\n\r\nexport type FollowSuccessActionType = ReturnType<typeof followSuccess>;\r\nexport type UnfollowSuccessActionType = ReturnType<typeof unfollowSuccess>;\r\nexport type SetUsersActionType = ReturnType<typeof setUsers>;\r\nexport type SetCurrentPageActionType = ReturnType<typeof setCurrentPage>;\r\nexport type SetTotalUsersCountActionType = ReturnType<typeof setTotalUsersCount>;\r\nexport type ToggleIsFetchingActionType = ReturnType<typeof toggleIsFetching>;\r\nexport type ToggleIsFollowingProgressActionType = ReturnType<typeof toggleIsFollowingProgress>;\r\n\r\ntype ThunkType = ThunkAction<void, AppStateType, unknown, ActionsType>\r\n\r\nexport const requestUsers = (page: number, pageSize: number): ThunkType =>\r\n    async (dispatch: ThunkDispatch<AppStateType, unknown, ActionsType>) => {\r\n        dispatch(toggleIsFetching(true));\r\n        dispatch(setCurrentPage(page));\r\n\r\n        let data = await usersAPI.getUsers(page, pageSize);\r\n\r\n        dispatch(toggleIsFetching(false));\r\n        dispatch(setUsers(data.items));\r\n        dispatch(setTotalUsersCount(data.totalCount));\r\n    }\r\n\r\nconst followUnfollowFlow = async (dispatch: ThunkDispatch<AppStateType, unknown, ActionsType>,\r\n                                  userId: number,\r\n                                  apiMethod: any,\r\n                                  actionCreator: typeof followSuccess | typeof unfollowSuccess) => {\r\n    dispatch(toggleIsFollowingProgress(true, userId));\r\n    let response = await apiMethod(userId)\r\n\r\n    if (response.data.resultCode === 0) {\r\n        dispatch(actionCreator(userId));\r\n    }\r\n    dispatch(toggleIsFollowingProgress(false, userId));\r\n}\r\n\r\nexport const follow = (userId: number): ThunkType =>\r\n    async (dispatch: ThunkDispatch<AppStateType, unknown, ActionsType>) => {\r\n        followUnfollowFlow(dispatch, userId, usersAPI.follow.bind(usersAPI), followSuccess);\r\n    }\r\n\r\nexport const unfollow = (userId: number): ThunkType =>\r\n    async (dispatch: ThunkDispatch<AppStateType, unknown, ActionsType>) => {\r\n        followUnfollowFlow(dispatch, userId, usersAPI.unfollow.bind(usersAPI), unfollowSuccess);\r\n    }\r\n\r\nexport default usersReducer;","import React, {useState} from \"react\";\r\nimport styles from \"./Paginator.module.css\";\r\n\r\ntype PaginatorPropsType = {\r\n    totalItemsCount: number\r\n    pageSize: number\r\n    currentPage: number\r\n    onPageChanged: (pageNumber: number) => void\r\n    portionSize: number\r\n}\r\n\r\nconst Paginator = (props: PaginatorPropsType) => {\r\n    let pagesCount = Math.ceil(props.totalItemsCount / props.pageSize);\r\n    let pages = [];\r\n    for (let i = 1; i <= pagesCount; i++) {\r\n        pages.push(i);\r\n    }\r\n\r\n    let portionCount = Math.ceil(pagesCount / props.portionSize);\r\n    const [portionNumber, setPortionNumber] = useState(1);\r\n    let leftPortionPageNumber = (portionNumber - 1) * props.portionSize + 1;\r\n    let rightPortionPageNumber = portionNumber * props.portionSize;\r\n\r\n    return (\r\n        <div className={styles.paginator}>\r\n            {portionNumber > 1 && <button onClick={() => {\r\n                setPortionNumber(portionNumber - 1)\r\n            }}>PREV</button>}\r\n\r\n            {pages\r\n                .filter(p => p >= leftPortionPageNumber && p <= rightPortionPageNumber)\r\n                .map(p => {\r\n                    return <span\r\n                        className={`${props.currentPage === p && styles.selectedPage} ${styles.pageNumber}`}\r\n                        key={p}\r\n                        onClick={() => {\r\n                            props.onPageChanged(p)\r\n                        }}\r\n                    >{p}</span>\r\n                })}\r\n\r\n            {portionCount > portionNumber && <button onClick={() => setPortionNumber(portionNumber + 1)}>NEXT</button>}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Paginator;","export default __webpack_public_path__ + \"static/media/user.a70779f1.png\";","import React from \"react\";\r\nimport styles from \"./Users.module.css\";\r\nimport userPhoto from \"../../assets/images/user.png\";\r\nimport {UserType} from \"../../redux/users-reducer\";\r\nimport {NavLink} from \"react-router-dom\";\r\n\r\ntype UserPropsType = {\r\n    user: UserType\r\n    follow: (userID: number) => void\r\n    unfollow: (userID: number) => void\r\n    followingInProgress: Array<number>\r\n}\r\n\r\nconst User = (props: UserPropsType) => {\r\n\r\n    return (\r\n        <div>\r\n                    <span>\r\n                        <div>\r\n                            <NavLink to={'/profile/' + props.user.id}>\r\n                            <img src={props.user.photos.small != null ? props.user.photos.small : userPhoto}\r\n                                 className={styles.userPhoto}\r\n                                 alt={\"\"}\r\n                            />\r\n                            </NavLink>\r\n                        </div>\r\n                        <div>\r\n                            {props.user.followed\r\n                                ? <button disabled={props.followingInProgress.some(id => id === props.user.id)}\r\n                                          onClick={() => {\r\n                                              props.unfollow(props.user.id);\r\n                                          }}>Unfollow</button>\r\n\r\n                                : <button disabled={props.followingInProgress.some(id => id === props.user.id)}\r\n                                          onClick={() => {\r\n                                              props.follow(props.user.id);\r\n                                          }}>Follow</button>\r\n                            }\r\n                        </div>\r\n                    </span>\r\n            <span>\r\n                        <span>\r\n                            <div>{props.user.name}</div>\r\n                            <div>{props.user.status}</div>\r\n                        </span>\r\n                        <span>\r\n                            <div>{\"u.location.country\"}</div>\r\n                            <div>{\"u.location.city\"}</div>\r\n                        </span>\r\n                    </span>\r\n        </div>\r\n    )\r\n}\r\n\r\n\r\nexport default User;","import React from \"react\";\r\nimport {UserType} from \"../../redux/users-reducer\";\r\nimport Paginator from \"../common/Paginator/Paginator\";\r\nimport User from \"./User\";\r\n\r\ntype UsersPropsType = {\r\n    totalUsersCount: number\r\n    pageSize: number\r\n    currentPage: number\r\n    onPageChanged: (pageNumber: number) => void\r\n    users: Array<UserType>\r\n    follow: (userID: number) => void\r\n    unfollow: (userID: number) => void\r\n    followingInProgress: Array<number>\r\n}\r\n\r\nconst Users = (props: UsersPropsType) => {\r\n\r\n    return (\r\n        <div>\r\n            <Paginator\r\n                totalItemsCount={props.totalUsersCount}\r\n                pageSize={props.pageSize}\r\n                currentPage={props.currentPage}\r\n                onPageChanged={props.onPageChanged}\r\n                portionSize={10}\r\n            />\r\n            {\r\n                props.users.map(u =>\r\n                    <User\r\n                        key={u.id}\r\n                        user={u}\r\n                        follow={props.follow}\r\n                        unfollow={props.unfollow}\r\n                        followingInProgress={props.followingInProgress}\r\n                    />)\r\n            }\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Users;","export default __webpack_public_path__ + \"static/media/preloader.a768dd7b.svg\";","import preloader from \"../../../assets/images/preloader.svg\";\r\nimport React from \"react\";\r\n\r\nconst Preloader = () => {\r\n    return <div>\r\n        <img src={preloader} alt=\"\"/>\r\n    </div>\r\n}\r\n\r\nexport default Preloader;","import {AppStateType} from \"./redux-store\";\r\nimport {createSelector} from \"reselect\";\r\nimport {UserType} from \"./users-reducer\";\r\n\r\nconst getUsersSelector = (state: AppStateType) => {\r\n    return state.usersPage.users\r\n}\r\n\r\nexport const getUsers = createSelector(getUsersSelector, (users: Array<UserType>) => {\r\n    return users\r\n})\r\n\r\nexport const getPageSize = (state: AppStateType) => {\r\n    return state.usersPage.pageSize\r\n}\r\n\r\nexport const getTotalUsersCount = (state: AppStateType) => {\r\n    return state.usersPage.totalUsersCount\r\n}\r\n\r\nexport const getCurrentPage = (state: AppStateType) => {\r\n    return state.usersPage.currentPage\r\n}\r\n\r\nexport const getIsFetching = (state: AppStateType) => {\r\n    return state.usersPage.isFetching\r\n}\r\n\r\nexport const getFollowingInProgress = (state: AppStateType) => {\r\n    return state.usersPage.followingInProgress\r\n}","import {connect} from \"react-redux\";\r\nimport {AppStateType} from \"../../redux/redux-store\";\r\nimport {\r\n    follow,\r\n    unfollow,\r\n    requestUsers,\r\n    setCurrentPage,\r\n    UserType\r\n} from \"../../redux/users-reducer\";\r\nimport React from \"react\";\r\n\r\nimport Users from \"./Users\";\r\nimport Preloader from \"../common/Preloader/Preloader\";\r\nimport {compose} from \"redux\";\r\nimport {\r\n    getCurrentPage, getFollowingInProgress,\r\n    getIsFetching,\r\n    getPageSize,\r\n    getTotalUsersCount,\r\n    getUsers\r\n} from \"../../redux/users-selectors\";\r\n\r\ntype UsersContainerType = MapStatePropsType & MapDispatchPropsType;\r\n\r\nclass UsersContainer extends React.Component<UsersContainerType> {\r\n\r\n    componentDidMount() {\r\n        const {currentPage, pageSize} = this.props;\r\n        this.props.getUsers(currentPage, pageSize);\r\n    }\r\n\r\n    onPageChanged = (pageNumber: number) => {\r\n        const {pageSize} = this.props;\r\n        this.props.setCurrentPage(pageNumber);\r\n        this.props.getUsers(pageNumber, pageSize);\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <>\r\n                {this.props.isFetching ? <Preloader/> : null}\r\n                <Users\r\n                    totalUsersCount={this.props.totalUsersCount}\r\n                    pageSize={this.props.pageSize}\r\n                    currentPage={this.props.currentPage}\r\n                    onPageChanged={this.onPageChanged}\r\n                    users={this.props.users}\r\n                    follow={this.props.follow}\r\n                    unfollow={this.props.unfollow}\r\n                    followingInProgress={this.props.followingInProgress}\r\n                />\r\n            </>\r\n        )\r\n    }\r\n}\r\n\r\ntype MapStatePropsType = {\r\n    users: Array<UserType>\r\n    pageSize: number\r\n    totalUsersCount: number\r\n    currentPage: number\r\n    isFetching: boolean\r\n    followingInProgress: Array<number>\r\n}\r\n\r\ntype MapDispatchPropsType = {\r\n    follow: (userID: number) => void\r\n    unfollow: (userID: number) => void\r\n    setCurrentPage: (pageNumber: number) => void\r\n    getUsers: (currentPage: number, pageSize: number) => void\r\n}\r\n\r\n// let mapStateToProps = (state: AppStateType): MapStatePropsType => {\r\n//     return {\r\n//         users: state.usersPage.users,\r\n//         pageSize: state.usersPage.pageSize,\r\n//         totalUsersCount: state.usersPage.totalUsersCount,\r\n//         currentPage: state.usersPage.currentPage,\r\n//         isFetching: state.usersPage.isFetching,\r\n//         followingInProgress: state.usersPage.followingInProgress\r\n//     }\r\n// }\r\n\r\nlet mapStateToProps = (state: AppStateType): MapStatePropsType => {\r\n    return {\r\n        users: getUsers(state),\r\n        pageSize: getPageSize(state),\r\n        totalUsersCount: getTotalUsersCount(state),\r\n        currentPage: getCurrentPage(state),\r\n        isFetching: getIsFetching(state),\r\n        followingInProgress: getFollowingInProgress(state)\r\n    }\r\n}\r\n\r\nexport default compose<React.ComponentType>(\r\n    //withAuthRedirect,\r\n    connect<MapStatePropsType, MapDispatchPropsType, {}, AppStateType>(mapStateToProps, {\r\n    follow,\r\n    unfollow,\r\n    setCurrentPage,\r\n    getUsers: requestUsers})\r\n)(UsersContainer);\r\n\r\n// let mapDispatchToProps = (dispatch: Dispatch<ActionsType>): MapDispatchPropsType => {\r\n//     return {\r\n//         follow: (userID: number) => {\r\n//             dispatch(followAC(userID))\r\n//         },\r\n//         unfollow: (userID: number) => {\r\n//             dispatch(unfollowAC(userID))\r\n//         },\r\n//         setUsers: (users: Array<UserType>) => {\r\n//             dispatch(setUsersAC(users))\r\n//         },\r\n//         setCurrentPage: (pageNumber: number) => {\r\n//             dispatch(setCurrentPageAC(pageNumber))\r\n//         },\r\n//         setTotalUsersCount: (totalCount: number) => {\r\n//             dispatch(setTotalUsersCountAC(totalCount))\r\n//         },\r\n//         toggleIsFetching: (isFetching: boolean) => {\r\n//             dispatch(toggleIsFetchingAC(isFetching))\r\n//         }\r\n//     }\r\n// }","import React, {ChangeEvent, useEffect, useState} from 'react';\r\n\r\ntype ProfileStatusPropsType = {\r\n    status: string\r\n    updateStatus: (status: string) => void\r\n}\r\n\r\nconst ProfileStatusWithHooks = (props: ProfileStatusPropsType) => {\r\n\r\n    const [editMode, setEditMode] = useState(false);\r\n    const [status, setStatus] = useState(props.status);\r\n\r\n    useEffect(() => {\r\n        setStatus(props.status)\r\n    }, [props.status])\r\n\r\n    const activateEditMode = () => {\r\n        setEditMode(true);\r\n    }\r\n\r\n    const deactivateEditMode = () => {\r\n        setEditMode(false);\r\n        props.updateStatus(status);\r\n    }\r\n\r\n    const onStatusChange = (e: ChangeEvent<HTMLInputElement>) => {\r\n            setStatus(e.currentTarget.value);\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            {\r\n                !editMode &&\r\n                <div>\r\n                    <span onDoubleClick={activateEditMode}>{props.status || \"-----\"}</span>\r\n                </div>\r\n            }\r\n            {\r\n                editMode &&\r\n                <div>\r\n                    <input\r\n                        onChange={onStatusChange}\r\n                        autoFocus\r\n                        onBlur={deactivateEditMode}\r\n                        type=\"text\"\r\n                        value={status}\r\n                    />\r\n                </div>\r\n            }\r\n        </div>\r\n    );\r\n\r\n}\r\n\r\nexport default ProfileStatusWithHooks;","import React from 'react';\r\nimport pr from './ProfileInfo.module.css';\r\nimport Preloader from \"../../common/Preloader/Preloader\";\r\nimport {ProfileType} from \"../../../redux/profile-reducer\";\r\nimport ProfileStatusWithHooks from \"./ProfileStatusWithHooks\";\r\n\r\ntype ProfileInfoPropsType = {\r\n    profile: ProfileType | null\r\n    status: string\r\n    updateStatus: (status: string) => void\r\n}\r\n\r\nfunction ProfileInfo(props: ProfileInfoPropsType) {\r\n    if (!props.profile) {\r\n        return <Preloader/>\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <div className={pr.descriptionBlock}>\r\n                <div>\r\n                    {/*<img src={\"https://i.pinimg.com/736x/03/6b/52/036b52f883bcd1ed0282736321d4ea59.jpg\"} width={100}/>*/}\r\n                    <img src={props.profile.photos.large\r\n                        ? props.profile.photos.large\r\n                        : \"https://st3.depositphotos.com/3581215/18899/v/600/depositphotos_188994514-stock-illustration-vector-illustration-male-silhouette-profile.jpg\"}\r\n                         alt=\"\"\r\n                         width={300}\r\n                    />\r\n                    <ProfileStatusWithHooks status={props.status} updateStatus={props.updateStatus}/>\r\n                </div>\r\n                <div>{props.profile.aboutMe}</div>\r\n                <div>{props.profile.fullName}</div>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default ProfileInfo;","import {profileAPI, usersAPI} from \"../api/api\";\r\nimport {ThunkAction, ThunkDispatch} from \"redux-thunk\";\r\nimport {ActionsType, AppStateType} from \"./redux-store\";\r\n\r\nconst ADD_POST = \"profile/ADD_POST\";\r\nconst SET_USER_PROFILE = \"profile/SET_USER_PROFILE\";\r\nconst SET_STATUS = \"profile/SET_STATUS\";\r\nconst DELETE_POST = \"profile/DELETE_POST\";\r\n\r\nexport type ProfileType = {\r\n    aboutMe: string\r\n    contacts: {\r\n        facebook: string\r\n        github: string\r\n        instagram: string\r\n        mainLink: string\r\n        twitter: string\r\n        vk: string\r\n        website: string\r\n        youtube: string\r\n    }\r\n    fullName: string\r\n    lookingForAJob: boolean\r\n    lookingForAJobDescription: string\r\n    photos: {\r\n        large: string | undefined\r\n        small: string | undefined\r\n    }\r\n    userId: number\r\n};\r\n\r\nexport type PostType = {\r\n    id: number\r\n    message: string\r\n    likesCount: number\r\n}\r\nexport type ProfilePageType = {\r\n    posts: Array<PostType>\r\n    profile: ProfileType | null\r\n    status: string\r\n}\r\n\r\nlet initialState: ProfilePageType = {\r\n    posts: [\r\n        {id: 1, message: \"Hi, how are you?\", likesCount: 12},\r\n        {id: 2, message: \"It's my first post!\", likesCount: 25}\r\n    ],\r\n    profile: null,\r\n    status: \"\"\r\n};\r\n\r\nconst profileReducer = (state: ProfilePageType = initialState, action: ActionsType): ProfilePageType => {\r\n\r\n    switch (action.type) {\r\n        case ADD_POST: {\r\n            let newPost: PostType = {\r\n                id: 5,\r\n                message: action.newPostText,\r\n                likesCount: 0\r\n            };\r\n            return {\r\n                ...state,\r\n                posts: [...state.posts, newPost]\r\n            };\r\n        }\r\n        case SET_USER_PROFILE: {\r\n            return {...state, profile: action.profile}\r\n        }\r\n        case SET_STATUS: {\r\n            return {...state, status: action.status}\r\n        }\r\n        case DELETE_POST: {\r\n            return {...state, posts: state.posts.filter(p => p.id !== action.postId)}\r\n        }\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\nexport const addPostAC = (newPostText: string) => ({type: ADD_POST, newPostText} as const);\r\nexport const setUserProfile = (profile: ProfileType) => ({type: SET_USER_PROFILE, profile} as const);\r\nexport const setStatus = (status: string) => ({type: SET_STATUS, status} as const);\r\nexport const deletePostAC = (postId: number) => ({type: DELETE_POST, postId} as const);\r\n\r\nexport type AddPostActionType = ReturnType<typeof addPostAC>;\r\nexport type SetUserProfileActionType = ReturnType<typeof setUserProfile>;\r\nexport type SetStatusActionType = ReturnType<typeof setStatus>;\r\nexport type DeletePostActionType = ReturnType<typeof deletePostAC>;\r\n\r\ntype ThunkType = ThunkAction<void, AppStateType, unknown, ActionsType>;\r\n\r\nexport const getUserProfile = (userId: number): ThunkType =>\r\n    async (dispatch: ThunkDispatch<AppStateType, unknown, ActionsType>) => {\r\n        let response = await usersAPI.getProfile(userId);\r\n        dispatch(setUserProfile(response.data));\r\n    };\r\n\r\n\r\nexport const getStatus = (userId: number): ThunkType =>\r\n    async (dispatch: ThunkDispatch<AppStateType, unknown, ActionsType>) => {\r\n        let response = await profileAPI.getStatus(userId);\r\n        dispatch(setStatus(response.data));\r\n    };\r\n\r\n\r\nexport const updateStatus = (status: string): ThunkType =>\r\n    async (dispatch: ThunkDispatch<AppStateType, unknown, ActionsType>) => {\r\n        let response = await profileAPI.updateStatus(status);\r\n\r\n        if (response.data.resultCode === 0) {\r\n            dispatch(setStatus(status));\r\n        }\r\n    };\r\n\r\n\r\nexport default profileReducer;","import React from 'react';\r\nimport pr from './Post.module.css';\r\nimport {PostType} from \"../../../../redux/profile-reducer\";\r\n\r\nfunction Post(props: PostType) {\r\n    return (\r\n\r\n        <div className={pr.item}>\r\n            <img src={\"https://i.pinimg.com/736x/03/6b/52/036b52f883bcd1ed0282736321d4ea59.jpg\"} alt={\"\"}/>\r\n            {props.message}\r\n            <div>\r\n                <span>likes: </span> {props.likesCount}\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Post;","import React from 'react';\r\nimport pr from './MyPosts.module.css';\r\nimport Post from \"./Post/Post\";\r\nimport {Field, InjectedFormProps, reduxForm} from \"redux-form\";\r\nimport {maxLengthCreator, required} from \"../../../utils/validators/validators\";\r\nimport {TextArea} from \"../../common/FormsControls/FormsControls\";\r\nimport {PostType} from \"../../../redux/profile-reducer\";\r\n\r\nconst maxLength10 = maxLengthCreator(10);\r\n\r\nexport type MyPostsType = {\r\n    posts: Array<PostType>\r\n    addPost: (newPostText: string) => void\r\n}\r\n\r\nconst MyPosts = React.memo((props: MyPostsType) => {\r\n\r\n    let postsElements =\r\n        [...props.posts]\r\n            .reverse()\r\n            .map(p => <Post id={p.id} message={p.message} likesCount={p.likesCount}/>);\r\n\r\n    let onAddPost = (values: AddNewPostFormType) => {\r\n        props.addPost(values.newPostText);\r\n    }\r\n\r\n    return (\r\n        <div className={pr.postsBlock}>\r\n            <h3>My posts</h3>\r\n            <AddNewPostReduxForm onSubmit={onAddPost}/>\r\n            <div className={pr.posts}>\r\n                {postsElements}\r\n            </div>\r\n        </div>\r\n    );\r\n})\r\n\r\ntype AddNewPostFormType = {\r\n    newPostText: string\r\n}\r\n\r\nconst AddNewPostForm: React.FC<InjectedFormProps<AddNewPostFormType>> = (props) => {\r\n    return (\r\n        <form onSubmit={props.handleSubmit}>\r\n            <div>\r\n                <Field\r\n                    name={\"newPostText\"}\r\n                    component={TextArea}\r\n                    type={\"text\"}\r\n                    validate={[required, maxLength10]}\r\n                    placeholder={\"post message\"}\r\n                />\r\n            </div>\r\n            <div>\r\n                <button>Add Post</button>\r\n            </div>\r\n        </form>\r\n    )\r\n}\r\n\r\nconst AddNewPostReduxForm = reduxForm<AddNewPostFormType>({form: \"profileAddNewPostForm\"})(AddNewPostForm);\r\n\r\nexport default MyPosts;","import {addPostAC, PostType} from \"../../../redux/profile-reducer\"\r\nimport MyPosts from \"./MyPosts\";\r\nimport {connect} from \"react-redux\";\r\nimport {ActionsType, AppStateType} from \"../../../redux/redux-store\";\r\nimport {Dispatch} from \"redux\";\r\n\r\ntype MapStatePropsType = {\r\n    posts: Array<PostType>\r\n}\r\n\r\ntype MapDispatchPropsType = {\r\n    addPost: (newPostText: string) => void\r\n}\r\n\r\nconst mapStateToProps = (state: AppStateType): MapStatePropsType => {\r\n    return {\r\n        posts: state.profilePage.posts\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch: Dispatch<ActionsType>): MapDispatchPropsType => {\r\n    return {\r\n        addPost: (newPostText: string) => {\r\n            dispatch(addPostAC(newPostText));\r\n        }\r\n    }\r\n}\r\n\r\nconst MyPostsContainer =\r\n    connect<MapStatePropsType, MapDispatchPropsType, {}, AppStateType>(mapStateToProps, mapDispatchToProps)(MyPosts);\r\n\r\nexport default MyPostsContainer;","import React, {ReactNode} from 'react';\r\nimport ProfileInfo from \"./ProfileInfo/ProfileInfo\";\r\nimport MyPostsContainer from \"./MyPosts/MyPostsContainer\";\r\nimport {ProfileType} from \"../../redux/profile-reducer\";\r\n\r\ntype ProfilePropsType = {\r\n    children?: ReactNode\r\n    profile: ProfileType | null\r\n    status: string\r\n    updateStatus: (status: string) => void\r\n}\r\n\r\nfunction Profile(props: ProfilePropsType) {\r\n\r\n    return (\r\n        <div>\r\n            <ProfileInfo\r\n                profile={props.profile}\r\n                status={props.status}\r\n                updateStatus={props.updateStatus}\r\n            />\r\n            <MyPostsContainer/>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Profile;","import React from 'react';\r\nimport Profile from \"./Profile\";\r\nimport {connect} from \"react-redux\";\r\nimport {getStatus, getUserProfile, ProfileType, updateStatus} from \"../../redux/profile-reducer\";\r\nimport {AppStateType} from \"../../redux/redux-store\";\r\nimport {RouteComponentProps, withRouter} from 'react-router-dom';\r\nimport {withAuthRedirect} from \"../../hoc/withAuthRedirect\";\r\nimport {compose} from \"redux\";\r\n\r\n//type OwnPropsType = MapStatePropsType & MapDispatchPropsType;\r\n\r\ntype OwnPropsType = {\r\n    profile: ProfileType | null\r\n    status: string\r\n    authorizedUserId: number\r\n    isAuth: boolean\r\n    getUserProfile: (userId: number) => void\r\n    getStatus: (userId: number) => void\r\n    updateStatus: (status: string) => void\r\n}\r\n\r\ntype PathParamsType = {\r\n    userId?: string\r\n};\r\n\r\ntype ProfileContainerPropsType = RouteComponentProps<PathParamsType> & OwnPropsType;\r\n\r\nclass ProfileContainer extends React.Component<ProfileContainerPropsType, {}> {\r\n\r\n    componentDidMount() {\r\n\r\n        let userId = Number(this.props.match.params.userId);\r\n        if (!userId) {\r\n            userId = this.props.authorizedUserId;\r\n            if (!userId) {\r\n                this.props.history.push(\"/login\")\r\n            }\r\n        }\r\n        this.props.getUserProfile(userId);\r\n        this.props.getStatus(userId);\r\n    }\r\n\r\n    render() {\r\n\r\n        return (\r\n            <Profile\r\n                {...this.props}\r\n                profile={this.props.profile}\r\n                status={this.props.status}\r\n                updateStatus={this.props.updateStatus}\r\n            />\r\n        )\r\n    }\r\n}\r\n\r\ntype MapStatePropsType = {\r\n    profile: ProfileType | null\r\n    status: string\r\n    authorizedUserId: number | null\r\n    isAuth: boolean\r\n};\r\n\r\ntype MapDispatchPropsType = {\r\n    getUserProfile: (userId: number) => void\r\n    getStatus: (userId: number) => void\r\n    updateStatus: (status: string) => void\r\n};\r\n\r\nlet mapStateToProps = (state: AppStateType): MapStatePropsType => ({\r\n    profile: state.profilePage.profile,\r\n    status: state.profilePage.status,\r\n    authorizedUserId: state.auth.id,\r\n    isAuth: state.auth.isAuth\r\n});\r\n\r\nexport default compose<React.ComponentType>(\r\n    connect<MapStatePropsType, MapDispatchPropsType, {}, AppStateType>(mapStateToProps,\r\n        {getUserProfile, getStatus, updateStatus}),\r\n    withRouter,\r\n    //withAuthRedirect\r\n)(ProfileContainer);\r\n","import React from 'react';\r\nimport {NavLink} from 'react-router-dom';\r\nimport styles from './Header.module.css';\r\n\r\ntype HeaderPropsType = {\r\n    isAuth: boolean\r\n    login: string | null\r\n    //getAuthUserData: () => void\r\n    logout: () => void\r\n}\r\n\r\nfunction Header(props: HeaderPropsType) {\r\n    return (\r\n        <header className={styles.header}>\r\n            <img src={'https://cdn.pixabay.com/photo/2016/01/19/07/35/social-1148031_960_720.png'} alt=\"\"/>\r\n            <div className={styles.loginBlock}>\r\n                {props.isAuth\r\n                    ? <div>{props.login} - <button onClick={props.logout}>Log out</button></div>\r\n                    : <NavLink to={\"/login\"}>Login</NavLink>}\r\n            </div>\r\n        </header>\r\n    );\r\n}\r\n\r\nexport default Header;","import {ThunkAction, ThunkDispatch} from \"redux-thunk\";\r\nimport {ActionsType, AppStateType} from \"./redux-store\";\r\nimport {authAPI, ResultCodesEnum} from \"../api/api\";\r\nimport {FormAction, stopSubmit} from \"redux-form\";\r\n\r\nconst SET_USER_DATA = \"auth/SET_USER_DATA\";\r\n\r\ntype AuthType = {\r\n    id: number | null\r\n    email: string | null\r\n    login: string | null\r\n    isAuth: boolean\r\n};\r\n\r\nlet initialState = {\r\n    id: null,\r\n    email: null,\r\n    login: null,\r\n    isAuth: false\r\n};\r\n\r\nexport const authReducer = (state: AuthType = initialState, action: ActionsType): AuthType => {\r\n    switch (action.type) {\r\n        case SET_USER_DATA:\r\n            return {\r\n                ...state,\r\n                ...action.payload\r\n            }\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\nexport const setAuthUserData = (id: number | null, email: string | null, login: string | null, isAuth: boolean) => ({\r\n    type: SET_USER_DATA,\r\n    payload: {id, email, login, isAuth}\r\n} as const);\r\n\r\ntype ThunkType = ThunkAction<void, AppStateType, unknown, ActionsType>;\r\n\r\nexport const getAuthUserData = (): ThunkAction<Promise<void>, AppStateType, unknown, ActionsType> =>\r\n    async (dispatch: ThunkDispatch<AppStateType, unknown, ActionsType>) => {\r\n        let response = await authAPI.me();\r\n\r\n        if (response.resultCode === ResultCodesEnum.Success) {\r\n            let {id, email, login} = response.data;\r\n            dispatch(setAuthUserData(id, email, login, true));\r\n        }\r\n    };\r\n\r\nexport const login = (email: string, password: string, rememberMe: boolean): ThunkType =>\r\n    async (dispatch: ThunkDispatch<AppStateType, unknown, ActionsType | FormAction>) => {\r\n        let response = await authAPI.login(email, password, rememberMe);\r\n\r\n        if (response.resultCode === ResultCodesEnum.Success) {\r\n            dispatch(getAuthUserData());\r\n        } else {\r\n            let msg = response.messages.length > 0 ? response.messages[0] : \"Some error\"\r\n            dispatch(stopSubmit(\"login\", {_error: msg}));\r\n        }\r\n    };\r\n\r\n\r\nexport const logout = (): ThunkType =>\r\n    async (dispatch: ThunkDispatch<AppStateType, unknown, ActionsType>) => {\r\n        let response = await authAPI.logout();\r\n\r\n        if (response.resultCode === 0) {\r\n            dispatch(setAuthUserData(null, null, null, false));\r\n        }\r\n    };\r\n\r\n\r\nexport type SetUserDataActionType = ReturnType<typeof setAuthUserData>;\r\n\r\nexport default authReducer;\r\n\r\n","import React from 'react';\r\nimport Header from \"./Header\";\r\nimport {connect} from \"react-redux\";\r\nimport {logout} from \"../../redux/auth-reducer\";\r\nimport {AppStateType} from \"../../redux/redux-store\";\r\n\r\ntype HeaderContainerPropsType = MapStatePropsType & MapDispatchPropsType;\r\n\r\nclass HeaderContainer extends React.Component<HeaderContainerPropsType, {}> {\r\n\r\n    render() {\r\n        return <Header {...this.props}/>\r\n    }\r\n}\r\n\r\ntype MapStatePropsType = {\r\n    isAuth: boolean\r\n    login: string | null\r\n};\r\n\r\ntype MapDispatchPropsType = {\r\n    logout: () => void\r\n};\r\n\r\nconst mapStateToProps = (state: AppStateType): MapStatePropsType => ({\r\n    isAuth: state.auth.isAuth,\r\n    login: state.auth.login\r\n});\r\n\r\nexport default connect<MapStatePropsType, MapDispatchPropsType, {}, AppStateType>(mapStateToProps, {\r\n    logout\r\n})(HeaderContainer);","import React from \"react\";\r\nimport {Field, InjectedFormProps, reduxForm} from \"redux-form\";\r\nimport {Input} from \"../common/FormsControls/FormsControls\";\r\nimport {required} from \"../../utils/validators/validators\";\r\nimport {connect} from \"react-redux\";\r\nimport {login} from \"../../redux/auth-reducer\";\r\nimport {Redirect} from \"react-router-dom\";\r\nimport {AppStateType} from \"../../redux/redux-store\";\r\nimport s from \"../common/FormsControls/FormsControls.module.css\";\r\n\r\ntype FormDataType = {\r\n    email: string\r\n    password: string\r\n    rememberMe: boolean\r\n}\r\n\r\nconst LoginForm: React.FC<InjectedFormProps<FormDataType>> = (props) => {\r\n    return (\r\n        <form onSubmit={props.handleSubmit}>\r\n            <div>\r\n                <Field type=\"text\" placeholder={\"Email\"} name={\"email\"} component={Input} validate={[required]}/>\r\n            </div>\r\n            <div>\r\n                <Field type=\"password\" placeholder={\"Password\"} name={\"password\"} component={Input}\r\n                       validate={[required]}/>\r\n            </div>\r\n            <div>\r\n                <Field type=\"checkbox\" name={\"rememberMe\"} component={Input}/> Remember me\r\n            </div>\r\n            {props.error && <div className={s.formSummaryError}>{props.error}</div>}\r\n            <div>\r\n                <button>Log In</button>\r\n            </div>\r\n        </form>\r\n    )\r\n}\r\n\r\nconst LoginReduxForm = reduxForm<FormDataType>({form: 'login'})(LoginForm);\r\n\r\ntype LoginPropsType = MapStatePropsType & MapDispatchPropsType;\r\n\r\nexport const Login = (props: LoginPropsType) => {\r\n\r\n    const onSubmit = (formData: FormDataType) => {\r\n        props.login(formData.email, formData.password, formData.rememberMe)\r\n    }\r\n\r\n    if (props.isAuth) {\r\n        return <Redirect to={\"/profile\"}/>\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <h1>Login</h1>\r\n            <LoginReduxForm onSubmit={onSubmit}/>\r\n        </div>\r\n    )\r\n}\r\n\r\ntype MapDispatchPropsType = {\r\n    login: (email: string, password: string, rememberMe: boolean) => void\r\n}\r\n\r\ntype MapStatePropsType = {\r\n    isAuth: boolean\r\n}\r\n\r\nlet mapStateToProps = (state: AppStateType): MapStatePropsType => {\r\n    return {\r\n        isAuth: state.auth.isAuth\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps, {login})(Login);","import {ActionsType} from \"./redux-store\";\r\n\r\nlet initialState = {}\r\ntype InitialStateType = typeof initialState;\r\n\r\nconst sidebarReducer = (state: InitialStateType = initialState, action: ActionsType) => {\r\n\r\n    return state;\r\n}\r\n\r\nexport default sidebarReducer;","import {ActionsType, AppStateType} from \"./redux-store\";\r\nimport {ThunkAction, ThunkDispatch} from \"redux-thunk\";\r\nimport {getAuthUserData} from \"./auth-reducer\";\r\n\r\nconst INITIALIZED_SUCCESS = \"app/INITIALIZED_SUCCESS\";\r\n\r\ntype InitialAppStateType = {\r\n    initialized: boolean\r\n};\r\n\r\nlet initialState = {\r\n    initialized: false\r\n};\r\n\r\nconst appReducer = (state: InitialAppStateType = initialState, action: ActionsType): InitialAppStateType => {\r\n    switch (action.type) {\r\n        case INITIALIZED_SUCCESS:\r\n            return {\r\n                ...state,\r\n                initialized: true\r\n            }\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\nexport const initializedSuccess = () => ({type: INITIALIZED_SUCCESS} as const);\r\nexport type InitializedSuccessActionType = ReturnType<typeof initializedSuccess>;\r\n\r\ntype ThunkType = ThunkAction<void, AppStateType, unknown, ActionsType>;\r\n\r\nexport const initializeApp = (): ThunkType => (dispatch: ThunkDispatch<AppStateType, unknown, ActionsType>) => {\r\n        let promise = dispatch(getAuthUserData());\r\n        promise.then(() => {\r\n            dispatch(initializedSuccess())\r\n        });\r\n};\r\n//\r\n// export const login = (email: string, password: string, rememberMe: boolean): ThunkType => {\r\n//     return (dispatch: ThunkDispatch<AppStateType, unknown, ActionsType | FormAction>) => {\r\n//         authAPI.login(email, password, rememberMe)\r\n//             .then(response => {\r\n//                 debugger;\r\n//                 if (response.resultCode === ResultCodesEnum.Success) {\r\n//                     dispatch(getAuthUserData());\r\n//                 } else {\r\n//                     let msg = response.messages.length > 0 ? response.messages[0] : \"Some error\"\r\n//                     dispatch(stopSubmit(\"login\", {_error: msg}));\r\n//                 }\r\n//             })\r\n//     }\r\n// };\r\n//\r\n// export const logout = (): ThunkType => {\r\n//     return (dispatch: ThunkDispatch<AppStateType, unknown, ActionsType>) => {\r\n//         authAPI.logout()\r\n//             .then(response => {\r\n//                 if (response.resultCode === 0) {\r\n//                     dispatch(setAuthUserData(null, null, null, false));\r\n//                 }\r\n//             })\r\n//     }\r\n// };\r\n\r\nexport default appReducer;\r\n\r\n","import {applyMiddleware, combineReducers, compose, createStore} from \"redux\";\r\nimport profileReducer, {\r\n    AddPostActionType, DeletePostActionType,\r\n    SetStatusActionType,\r\n    SetUserProfileActionType,\r\n\r\n} from \"./profile-reducer\";\r\nimport dialogsReducer, {SendMessageActionType} from \"./dialogs-reducer\";\r\nimport sidebarReducer from \"./sidebar-reducer\";\r\nimport usersReducer, {\r\n    FollowSuccessActionType,\r\n    SetCurrentPageActionType,\r\n    SetTotalUsersCountActionType,\r\n    SetUsersActionType,\r\n    ToggleIsFetchingActionType,\r\n    ToggleIsFollowingProgressActionType,\r\n    UnfollowSuccessActionType\r\n} from \"./users-reducer\";\r\nimport authReducer, {SetUserDataActionType} from \"./auth-reducer\";\r\nimport thunkMiddleware from \"redux-thunk\";\r\nimport {reducer as formReducer} from \"redux-form\";\r\nimport appReducer, {InitializedSuccessActionType} from \"./app-reducer\";\r\n\r\nexport type StoreType = typeof store;\r\n\r\nlet reducers = combineReducers({\r\n    profilePage: profileReducer,\r\n    dialogsPage: dialogsReducer,\r\n    sidebar: sidebarReducer,\r\n    usersPage: usersReducer,\r\n    auth: authReducer,\r\n    form: formReducer,\r\n    app: appReducer\r\n});\r\n\r\ntype RootReducerType = typeof reducers;\r\nexport type AppStateType = ReturnType<RootReducerType>\r\n\r\n// @ts-ignore\r\nconst composeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose;\r\nconst store = createStore(reducers, composeEnhancers(applyMiddleware(thunkMiddleware)));\r\n\r\n//let store = createStore(reducers, applyMiddleware(thunkMiddleware));\r\n\r\nexport type ActionsType =\r\n    AddPostActionType\r\n    | SendMessageActionType\r\n    | FollowSuccessActionType\r\n    | UnfollowSuccessActionType\r\n    | SetUsersActionType\r\n    | SetCurrentPageActionType\r\n    | SetTotalUsersCountActionType\r\n    | ToggleIsFetchingActionType\r\n    | SetUserProfileActionType\r\n    | SetUserDataActionType\r\n    | ToggleIsFollowingProgressActionType\r\n    | SetStatusActionType\r\n    | InitializedSuccessActionType\r\n    | DeletePostActionType\r\n\r\n// @ts-ignore\r\nwindow._store = store\r\n\r\nexport default store;\r\n","import React from \"react\";\r\nimport './App.css';\r\nimport Navbar from \"./components/Navbar/Navbar\";\r\nimport {BrowserRouter, Route, withRouter} from 'react-router-dom';\r\nimport UsersContainer from \"./components/Users/UsersContainer\";\r\nimport ProfileContainer from \"./components/Profile/ProfileContainer\";\r\nimport HeaderContainer from \"./components/Header/HeaderContainer\";\r\nimport LoginPage from \"./components/Login/Login\";\r\nimport {connect, Provider} from \"react-redux\";\r\nimport store, {AppStateType} from \"./redux/redux-store\";\r\nimport {compose} from \"redux\";\r\nimport {initializeApp} from \"./redux/app-reducer\";\r\nimport Preloader from \"./components/common/Preloader/Preloader\";\r\nimport {withSuspense} from \"./hoc/withSuspense\";\r\nconst DialogsContainer = React.lazy(() => import('./components/Dialogs/DialogsContainer'));\r\n\r\ntype AppPropsType = {\r\n    initialized: boolean\r\n    initializeApp: () => void\r\n}\r\n\r\nclass App extends React.Component<AppPropsType> {\r\n\r\n    componentDidMount() {\r\n        this.props.initializeApp();\r\n    }\r\n\r\n    render() {\r\n        if (!this.props.initialized) {\r\n            return <Preloader/>\r\n        }\r\n\r\n        return (\r\n            <div className=\"app-wrapper\">\r\n                <HeaderContainer/>\r\n                <Navbar/>\r\n                <div className=\"app-wrapper-content\">\r\n                    <Route path={\"/dialogs\"} render={withSuspense(DialogsContainer)}/>\r\n                    <Route path={\"/profile/:userId?\"} render={() => <ProfileContainer/>}/>\r\n                    <Route path={\"/users\"} render={() => <UsersContainer/>}/>\r\n                    <Route path={\"/login\"} render={() => <LoginPage/>}/>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\ntype MapStatePropsType = {\r\n    initialized: boolean\r\n}\r\n\r\ntype MapDispatchPropsType = {\r\n    initializeApp: () => void\r\n};\r\n\r\nlet mapStateToProps = (state: AppStateType): MapStatePropsType => ({\r\n    initialized: state.app.initialized\r\n});\r\n\r\nconst AppContainer = compose<React.ComponentType>(\r\n    withRouter,\r\n    connect<MapStatePropsType, MapDispatchPropsType, {}, AppStateType>(mapStateToProps, {\r\n        initializeApp\r\n    }))(App);\r\n\r\nconst MainApp = () => {\r\n    return <BrowserRouter basename={process.env.PUBLIC_URL}>\r\n        <Provider store={store}>\r\n            <AppContainer/>\r\n        </Provider>\r\n    </BrowserRouter>\r\n}\r\n\r\nexport default MainApp;","import React, {ComponentType, Suspense} from \"react\";\r\n\r\nexport const withSuspense = (Component: ComponentType) => {\r\n\r\n    return (props: any) => {\r\n        return <Suspense fallback={<div>Loading...</div>}>\r\n            <Component {...props}/>\r\n        </Suspense>\r\n    }\r\n}","import { ReportHandler } from 'web-vitals';\r\n\r\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport MainApp from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nReactDOM.render(\r\n        <MainApp/>\r\n        , document.getElementById('root')\r\n    );\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n","export const required = (value: string | undefined) => {\r\n    if (value)\r\n        return undefined;\r\n\r\n    return \"Field is required\";\r\n}\r\n\r\nexport const maxLengthCreator = (maxLength: number) => (value: string | undefined) => {\r\n    if (value && value.length > maxLength)\r\n        return `Max length is ${maxLength} symbols`;\r\n\r\n    return undefined;\r\n}\r\n","import React from \"react\";\r\nimport s from \"./FormsControls.module.css\";\r\nimport {WrappedFieldProps} from \"redux-form\";\r\n\r\nexport const FormControl: React.FC<WrappedFieldProps> = ({input, meta, children, ...restProps}) => {\r\n    const hasError = meta.touched && meta.error;\r\n\r\n    return (\r\n        <div className={s.formControl + \" \" + (hasError && s.error)}>\r\n            <div>\r\n                {children}\r\n            </div>\r\n            {hasError && <span>{meta.error}</span>}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport const TextArea: React.FC<WrappedFieldProps> = (props) => {\r\n    const {input, meta, ...restProps} = props;\r\n    return <FormControl {...props}><textarea {...input} {...restProps}/></FormControl>\r\n}\r\n\r\nexport const Input: React.FC<WrappedFieldProps> = (props) => {\r\n    const {input, meta, ...restProps} = props;\r\n    return <FormControl {...props}><input {...input} {...restProps}/></FormControl>\r\n}","// extracted by mini-css-extract-plugin\nmodule.exports = {\"formControl\":\"FormsControls_formControl__Yt3ze\",\"error\":\"FormsControls_error__1SetC\",\"formSummaryError\":\"FormsControls_formSummaryError__3MKTl\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"pageNumber\":\"Paginator_pageNumber__YuXb1\",\"selectedPage\":\"Paginator_selectedPage__3oD9J\",\"paginator\":\"Paginator_paginator__1IFtu\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"postsBlock\":\"MyPosts_postsBlock__25ZBK\",\"posts\":\"MyPosts_posts__3nCxA\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"header\":\"Header_header__2xkqV\",\"loginBlock\":\"Header_loginBlock__3ckct\"};"],"sourceRoot":""}