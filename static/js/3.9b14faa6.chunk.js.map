{"version":3,"sources":["components/Dialogs/Dialogs.module.css","components/Dialogs/DialogItem/DialogItem.tsx","components/Dialogs/Message/Message.tsx","components/Dialogs/Dialogs.tsx","hoc/withAuthRedirect.tsx","components/Dialogs/DialogsContainer.tsx"],"names":["module","exports","DialogItem","props","className","s","dialog","active","to","id","name","Message","message","maxLength100","maxLengthCreator","AddMessageFormRedux","reduxForm","form","onSubmit","handleSubmit","Field","component","TextArea","placeholder","validate","required","Dialogs","state","dialogsPage","dialogsElements","dialogs","map","d","messagesElements","messages","m","dialogsItems","values","sendMessage","newMessageBody","mapStateToProps","isAuth","auth","compose","connect","dispatch","sendMessageCreator","Component","restProps"],"mappings":"iHACAA,EAAOC,QAAU,CAAC,QAAU,yBAAyB,aAAe,8BAA8B,OAAS,wBAAwB,SAAW,0BAA0B,QAAU,2B,oGCYnKC,MARf,SAAoBC,GAChB,OACI,qBAAKC,UAAWC,IAAEC,OAAS,IAAMD,IAAEE,OAAnC,SACI,cAAC,IAAD,CAASC,GAAI,YAAcL,EAAMM,GAAjC,SAAsCN,EAAMO,UCEzCC,MANf,SAAiBR,GACb,OACI,qBAAKC,UAAWC,IAAEO,QAAlB,SAA4BT,EAAMS,W,kCCuC1C,IAAMC,EAAeC,YAAiB,KAqBhCC,EAAsBC,YAA8B,CAACC,KAAM,wBAArCD,EAnB4C,SAACb,GAErE,OACI,uBAAMe,SAAUf,EAAMgB,aAAtB,UACI,8BACI,cAACC,EAAA,EAAD,CACIC,UAAWC,IACXZ,KAAM,iBACNa,YAAa,qBACbC,SAAU,CAACC,IAAUZ,OAG7B,8BACI,kDAQDa,EApDf,SAAiBvB,GAEb,IAAIwB,EAAQxB,EAAMyB,YACdC,EAAkBF,EAAMG,QAAQC,KAAI,SAAAC,GAAC,OAAI,cAAC,EAAD,CAAYtB,KAAMsB,EAAEtB,KAAMD,GAAIuB,EAAEvB,IAASuB,EAAEvB,OACpFwB,EAAmBN,EAAMO,SAASH,KAAI,SAAAI,GAAC,OAAI,cAAC,EAAD,CAASvB,QAASuB,EAAEvB,QAASH,GAAI0B,EAAE1B,IAAS0B,EAAE1B,OAM7F,OACI,sBAAKL,UAAWC,IAAEyB,QAAlB,UACI,qBAAK1B,UAAWC,IAAE+B,aAAlB,SACKP,IAEL,sBAAKzB,UAAWC,IAAE6B,SAAlB,UACI,8BAAMD,IACN,8BACI,cAAClB,EAAD,CAAqBG,SAZf,SAACmB,GACnBlC,EAAMmC,YAAYD,EAAOE,4B,+BCd7BC,EAAkB,SAACb,GACnB,MAAO,CACHc,OAAQd,EAAMe,KAAKD,SCmBZE,sBACXC,aAfkB,SAACjB,GACnB,MAAO,CACHC,YAAaD,EAAMC,gBAIF,SAACiB,GACtB,MAAO,CACHP,YAAa,SAACC,GACVM,EAASC,YAAmBP,UDVjC,SAA6BQ,GAUhC,OAAOH,YAAQJ,EAARI,EARmB,SAACzC,GAA8B,IAChDsC,EAAwBtC,EAAxBsC,OAAWO,EADoC,YACvB7C,EADuB,YAGpD,OAAKsC,EAEE,cAACM,EAAD,eAAeC,IAFF,cAAC,IAAD,CAAUxC,GAAI,gBCU3BmC,CAGbjB","file":"static/js/3.9b14faa6.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"dialogs\":\"Dialogs_dialogs__BFrC2\",\"dialogsItems\":\"Dialogs_dialogsItems__3xNO4\",\"active\":\"Dialogs_active__LOKy_\",\"messages\":\"Dialogs_messages__1Krod\",\"message\":\"Dialogs_message__ga7pV\"};","import React from \"react\";\r\nimport {NavLink} from \"react-router-dom\";\r\nimport s from './../Dialogs.module.css';\r\nimport {DialogItemType} from \"../../../redux/dialogs-reducer\";\r\n\r\nfunction DialogItem(props: DialogItemType) {\r\n    return (\r\n        <div className={s.dialog + ' ' + s.active}>\r\n            <NavLink to={\"/dialogs/\" + props.id}>{props.name}</NavLink>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default DialogItem;","import React from \"react\";\r\nimport s from './../Dialogs.module.css';\r\nimport {MessageType} from \"../../../redux/dialogs-reducer\";\r\n\r\nfunction Message(props: MessageType) {\r\n    return (\r\n        <div className={s.message}>{props.message}</div>\r\n    )\r\n}\r\n\r\nexport default Message;","import React from \"react\";\r\nimport s from './Dialogs.module.css';\r\nimport DialogItem from \"./DialogItem/DialogItem\";\r\nimport Message from \"./Message/Message\";\r\nimport {DialogsPageType} from \"../../redux/dialogs-reducer\";\r\nimport {reduxForm, Field, InjectedFormProps} from \"redux-form\";\r\nimport {TextArea} from \"../common/FormsControls/FormsControls\";\r\nimport {maxLengthCreator, required} from \"../../utils/validators/validators\";\r\n\r\nexport type DialogsType = {\r\n    updateNewMessageBody: (body: string) => void\r\n    sendMessage: (newMessageBody: string) => void\r\n    dialogsPage: DialogsPageType\r\n    isAuth: boolean\r\n}\r\n\r\nfunction Dialogs(props: DialogsType) {\r\n\r\n    let state = props.dialogsPage;\r\n    let dialogsElements = state.dialogs.map(d => <DialogItem name={d.name} id={d.id} key={d.id}/>);\r\n    let messagesElements = state.messages.map(m => <Message message={m.message} id={m.id} key={m.id}/>);\r\n\r\n    const addNewMessage = (values: AddMessageFormType) => {\r\n        props.sendMessage(values.newMessageBody);\r\n    }\r\n\r\n    return (\r\n        <div className={s.dialogs}>\r\n            <div className={s.dialogsItems}>\r\n                {dialogsElements}\r\n            </div>\r\n            <div className={s.messages}>\r\n                <div>{messagesElements}</div>\r\n                <div>\r\n                    <AddMessageFormRedux onSubmit={addNewMessage}/>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\ntype AddMessageFormType = {\r\n    newMessageBody: string\r\n}\r\n\r\nconst maxLength100 = maxLengthCreator(100);\r\n\r\nconst AddMessageForm: React.FC<InjectedFormProps<AddMessageFormType>> = (props) => {\r\n\r\n    return (\r\n        <form onSubmit={props.handleSubmit}>\r\n            <div>\r\n                <Field\r\n                    component={TextArea}\r\n                    name={\"newMessageBody\"}\r\n                    placeholder={\"Enter your message\"}\r\n                    validate={[required, maxLength100]}\r\n                />\r\n            </div>\r\n            <div>\r\n                <button>Send</button>\r\n            </div>\r\n        </form>\r\n    )\r\n}\r\n\r\nconst AddMessageFormRedux = reduxForm<AddMessageFormType>({form: \"dialogAddMessageForm\"})(AddMessageForm);\r\n\r\nexport default Dialogs;","import React, {ComponentType} from \"react\";\r\nimport {Redirect} from \"react-router-dom\";\r\nimport {connect} from \"react-redux\";\r\nimport {AppStateType} from \"../redux/redux-store\";\r\n\r\ntype MapStatePropsType = {\r\n    isAuth: boolean\r\n}\r\n\r\nlet mapStateToProps = (state: AppStateType): MapStatePropsType => {\r\n    return {\r\n        isAuth: state.auth.isAuth\r\n    }\r\n}\r\n\r\nexport function withAuthRedirect<T>(Component: ComponentType<T>) {\r\n\r\n    const RedirectComponent = (props: MapStatePropsType) => {\r\n        let {isAuth, ...restProps} = props;\r\n\r\n        if (!isAuth) return <Redirect to={\"/login\"}/>;\r\n\r\n        return <Component {...restProps as T}/>;\r\n    }\r\n\r\n    return connect(mapStateToProps)(RedirectComponent);\r\n}","import {compose, Dispatch} from \"redux\"\r\nimport {DialogsPageType, sendMessageCreator} from \"../../redux/dialogs-reducer\";\r\nimport Dialogs from \"./Dialogs\";\r\nimport {connect} from \"react-redux\";\r\nimport {ActionsType, AppStateType} from \"../../redux/redux-store\";\r\nimport {withAuthRedirect} from \"../../hoc/withAuthRedirect\";\r\nimport React from \"react\";\r\n\r\ntype MapStatePropsType = {\r\n    dialogsPage: DialogsPageType\r\n}\r\n\r\ntype MapDispatchPropsType = {\r\n    sendMessage: (newMessageBody: string) => void\r\n}\r\n\r\nlet mapStateToProps = (state: AppStateType): MapStatePropsType => {\r\n    return {\r\n        dialogsPage: state.dialogsPage,\r\n    }\r\n}\r\n\r\nlet mapDispatchToProps = (dispatch: Dispatch<ActionsType>): MapDispatchPropsType => {\r\n    return {\r\n        sendMessage: (newMessageBody: string) => {\r\n            dispatch(sendMessageCreator(newMessageBody));\r\n        }\r\n    }\r\n}\r\n\r\nexport default compose<React.ComponentType>(\r\n    connect<MapStatePropsType, MapDispatchPropsType, {}, AppStateType>(mapStateToProps, mapDispatchToProps),\r\n    withAuthRedirect\r\n)(Dialogs);\r\n\r\n\r\n"],"sourceRoot":""}